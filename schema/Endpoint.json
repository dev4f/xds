{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "$ref": "#/definitions/envoy.config.route.v3.Endpoint",
    "definitions": {
        "envoy.config.endpoint.v3.Endpoint": {
            "properties": {
                "address": {
                    "$ref": "#/definitions/envoy.config.core.v3.Address",
                    "additionalProperties": true,
                    "description": "The upstream host address. .. attention::   The form of host address depends on the given cluster type. For STATIC or EDS,   it is expected to be a direct IP address (or something resolvable by the   specified :ref:`resolver \u003cenvoy_v3_api_field_config.core.v3.SocketAddress.resolver_name\u003e`   in the Address). For LOGICAL or STRICT DNS, it is expected to be hostname,   and will be resolved via DNS."
                },
                "health_check_config": {
                    "$ref": "#/definitions/envoy.config.endpoint.v3.Endpoint.HealthCheckConfig",
                    "additionalProperties": true,
                    "description": "The optional health check configuration is used as configuration for the health checker to contact the health checked host. .. attention::   This takes into effect only for upstream clusters with   :ref:`active health checking \u003carch_overview_health_checking\u003e` enabled."
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname associated with this endpoint. This hostname is not used for routing or address resolution. If provided, it will be associated with the endpoint, and can be used for features that require a hostname, like :ref:`auto_host_rewrite \u003cenvoy_v3_api_field_config.route.v3.RouteAction.auto_host_rewrite\u003e`."
                },
                "additional_addresses": {
                    "items": {
                        "$ref": "#/definitions/envoy.config.endpoint.v3.Endpoint.AdditionalAddress"
                    },
                    "type": "array",
                    "description": "An ordered list of addresses that together with ``address`` comprise the list of addresses for an endpoint. The address given in the ``address`` is prepended to this list. It is assumed that the list must already be sorted by preference order of the addresses. This will only be supported for STATIC and EDS clusters."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "[#protodoc-title: Endpoints]",
            "description": "[#protodoc-title: Endpoints]  Upstream host identifier."
        },
        "envoy.config.core.v3.Address": {
            "properties": {
                "socket_address": {
                    "$ref": "#/definitions/envoy.config.core.v3.SocketAddress",
                    "additionalProperties": true
                },
                "pipe": {
                    "$ref": "#/definitions/envoy.config.core.v3.Pipe",
                    "additionalProperties": true
                },
                "envoy_internal_address": {
                    "$ref": "#/definitions/envoy.config.core.v3.EnvoyInternalAddress",
                    "additionalProperties": true,
                    "description": "Specifies a user-space address handled by :ref:`internal listeners \u003cenvoy_v3_api_field_config.listener.v3.Listener.internal_listener\u003e`."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Address",
            "description": "Addresses specify either a logical or physical address and port, which are used to tell Envoy where to bind/listen, connect to upstream and find management servers."
        },
        "envoy.config.core.v3.EnvoyInternalAddress": {
            "properties": {
                "server_listener_name": {
                    "type": "string",
                    "description": "Specifies the :ref:`name \u003cenvoy_v3_api_field_config.listener.v3.Listener.name\u003e` of the internal listener."
                },
                "endpoint_id": {
                    "type": "string",
                    "description": "Specifies an endpoint identifier to distinguish between multiple endpoints for the same internal listener in a single upstream pool. Only used in the upstream addresses for tracking changes to individual endpoints. This, for example, may be set to the final destination IP for the target internal listener."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Envoy Internal Address",
            "description": "The address represents an envoy internal listener. [#comment: TODO(asraa): When address available, remove workaround from test/server/server_fuzz_test.cc:30.]"
        },
        "envoy.config.core.v3.Pipe": {
            "properties": {
                "path": {
                    "minLength": 1,
                    "type": "string",
                    "description": "Unix Domain Socket path. On Linux, paths starting with '@' will use the abstract namespace. The starting '@' is replaced by a null byte by Envoy. Paths starting with '@' will result in an error in environments other than Linux."
                },
                "mode": {
                    "type": "integer",
                    "description": "The mode for the Pipe. Not applicable for abstract sockets."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "[#protodoc-title: Network addresses]",
            "description": "[#protodoc-title: Network addresses]"
        },
        "envoy.config.core.v3.SocketAddress": {
            "properties": {
                "protocol": {
                    "enum": [
                        "TCP",
                        0,
                        "UDP",
                        1
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Protocol"
                },
                "address": {
                    "minLength": 1,
                    "type": "string",
                    "description": "The address for this socket. :ref:`Listeners \u003cconfig_listeners\u003e` will bind to the address. An empty address is not allowed. Specify ``0.0.0.0`` or ``::`` to bind to any address. [#comment:TODO(zuercher) reinstate when implemented: It is possible to distinguish a Listener address via the prefix/suffix matching in :ref:`FilterChainMatch \u003cenvoy_v3_api_msg_config.listener.v3.FilterChainMatch\u003e`.] When used within an upstream :ref:`BindConfig \u003cenvoy_v3_api_msg_config.core.v3.BindConfig\u003e`, the address controls the source address of outbound connections. For :ref:`clusters \u003cenvoy_v3_api_msg_config.cluster.v3.Cluster\u003e`, the cluster type determines whether the address must be an IP (``STATIC`` or ``EDS`` clusters) or a hostname resolved by DNS (``STRICT_DNS`` or ``LOGICAL_DNS`` clusters). Address resolution can be customized via :ref:`resolver_name \u003cenvoy_v3_api_field_config.core.v3.SocketAddress.resolver_name\u003e`."
                },
                "port_value": {
                    "type": "integer"
                },
                "named_port": {
                    "type": "string",
                    "description": "This is only valid if :ref:`resolver_name \u003cenvoy_v3_api_field_config.core.v3.SocketAddress.resolver_name\u003e` is specified below and the named resolver is capable of named port resolution."
                },
                "resolver_name": {
                    "type": "string",
                    "description": "The name of the custom resolver. This must have been registered with Envoy. If this is empty, a context dependent default applies. If the address is a concrete IP address, no resolution will occur. If address is a hostname this should be set for resolution other than DNS. Specifying a custom resolver with ``STRICT_DNS`` or ``LOGICAL_DNS`` will generate an error at runtime."
                },
                "ipv4_compat": {
                    "type": "boolean",
                    "description": "When binding to an IPv6 address above, this enables `IPv4 compatibility \u003chttps://tools.ietf.org/html/rfc3493#page-11\u003e`_. Binding to ``::`` will allow both IPv4 and IPv6 connections, with peer IPv4 addresses mapped into IPv6 space as ``::FFFF:\u003cIPv4-address\u003e``."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Socket Address",
            "description": "[#next-free-field: 7]"
        },
        "envoy.config.endpoint.v3.Endpoint.AdditionalAddress": {
            "properties": {
                "address": {
                    "$ref": "#/definitions/envoy.config.core.v3.Address",
                    "additionalProperties": true,
                    "description": "Additional address that is associated with the endpoint."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Additional Address"
        },
        "envoy.config.endpoint.v3.Endpoint.HealthCheckConfig": {
            "properties": {
                "port_value": {
                    "type": "integer",
                    "description": "Optional alternative health check port value. By default the health check address port of an upstream host is the same as the host's serving address port. This provides an alternative health check port. Setting this with a non-zero value allows an upstream host to have different health check address port."
                },
                "hostname": {
                    "type": "string",
                    "description": "By default, the host header for L7 health checks is controlled by cluster level configuration (see: :ref:`host \u003cenvoy_v3_api_field_config.core.v3.HealthCheck.HttpHealthCheck.host\u003e` and :ref:`authority \u003cenvoy_v3_api_field_config.core.v3.HealthCheck.GrpcHealthCheck.authority\u003e`). Setting this to a non-empty value allows overriding the cluster level configuration for a specific endpoint."
                },
                "address": {
                    "$ref": "#/definitions/envoy.config.core.v3.Address",
                    "additionalProperties": true,
                    "description": "Optional alternative health check host address. .. attention::   The form of the health check host address is expected to be a direct IP address."
                },
                "disable_active_health_check": {
                    "type": "boolean",
                    "description": "Optional flag to control if perform active health check for this endpoint. Active health check is enabled by default if there is a health checker."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Health Check Config",
            "description": "The optional health check configuration."
        }
    }
}